In computer science and information theory, a Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding, an algorithm developed by David A. Huffman while he was a Sc.D. student at MIT, and published in the 1952 paper "A Method for the Construction of Minimum-Redundancy Codes".[1]

The output from Huffman's algorithm can be viewed as a variable-length code table for encoding a source symbol (such as a character in a file). The algorithm derives this table from the estimated probability or frequency of occurrence (weight) for each possible value of the source symbol. As in other entropy encoding methods, more common symbols are generally represented using fewer bits than less common symbols. Huffman's method can be efficiently implemented, finding a code in time linear to the number of input weights if these weights are sorted.[2] However, although optimal among methods encoding symbols separately, Huffman coding is not always optimal among all compression methods - it is replaced with arithmetic coding[3] or asymmetric numeral systems[4] if better compression ratio is required. 
In 1951, David A. Huffman and his MIT information theory classmates were given the choice of a term paper or a final exam. The professor, Robert M. Fano, assigned a term paper on the problem of finding the most efficient binary code. Huffman, unable to prove any codes were the most efficient, was about to give up and start studying for the final when he hit upon the idea of using a frequency-sorted binary tree and quickly proved this method the most efficient.[5]

In doing so, Huffman outdid Fano, who had worked with information theory inventor Claude Shannon to develop a similar code. Building the tree from the bottom up guaranteed optimality, unlike the top-down approach of Shannon–Fano coding.
Terminology

Huffman coding uses a specific method for choosing the representation for each symbol, resulting in a prefix code (sometimes called "prefix-free codes", that is, the bit string representing some particular symbol is never a prefix of the bit string representing any other symbol). Huffman coding is such a widespread method for creating prefix codes that the term "Huffman code" is widely used as a synonym for "prefix code" even when such a code is not produced by Huffman's algorithm.
Problem definition
Constructing a Huffman Tree
Informal description

Given
    A set of symbols and their weights (usually proportional to probabilities).
Find
    A prefix-free binary code (a set of codewords) with minimum expected codeword length (equivalently, a tree with minimum weighted path length from the root).

Formalized description

Input.
Alphabet A = ( a 1 , a 2 , … , a n ) {\displaystyle A=(a_{1},a_{2},\dots ,a_{n})} {\displaystyle A=(a_{1},a_{2},\dots ,a_{n})}, which is the symbol alphabet of size n {\displaystyle n} n.
Tuple W = ( w 1 , w 2 , … , w n ) {\displaystyle W=(w_{1},w_{2},\dots ,w_{n})} {\displaystyle W=(w_{1},w_{2},\dots ,w_{n})}, which is the tuple of the (positive) symbol weights (usually proportional to probabilities), i.e. w i = w e i g h t ( a i ) , i ∈ { 1 , 2 , . . . , n } {\displaystyle w_{i}=\mathrm {weight} \left(a_{i}\right),\,i\in \{1,2,...,n\}} {\displaystyle w_{i}=\mathrm {weight} \left(a_{i}\right),\,i\in \{1,2,...,n\}}.

Output.
Code C ( W ) = ( c 1 , c 2 , … , c n ) {\displaystyle C\left(W\right)=(c_{1},c_{2},\dots ,c_{n})} {\displaystyle C\left(W\right)=(c_{1},c_{2},\dots ,c_{n})}, which is the tuple of (binary) codewords, where c i {\displaystyle c_{i}} c_{i} is the codeword for a i , i ∈ { 1 , 2 , . . . , n } {\displaystyle a_{i},\,i\in \{1,2,...,n\}} {\displaystyle a_{i},\,i\in \{1,2,...,n\}}.

Goal.
Example
We give an example of the result of Huffman coding for a code with five characters and given weights. We will not verify that it minimizes L over all codes, but we will compute L and compare it to the Shannon entropy H of the given set of weights; the result is nearly optimal. 